#! /usr/bin/env python

#  Robert Palmere June 2018
#  Generalization (bruknD2pipe) of AJN 2012 bruk3d2pipe.csh script using Python.

# ---Import Modules

import sys
import os
import stat
import glob
import re
import subprocess
import datetime
import time


class Main:
    def __init__(self):
        #  -- Append System Path
        self.dir_path = os.path.dirname(os.path.realpath(__file__))

        #  -- Set Gammas
        self.gamma_h1 = 1.0
        self.gamma_h2 = 0.153506088
        self.gamma_c13 = 0.251449530
        self.gamma_n15 = 0.101329118
        self.gamma_p31 = 0.404808636
        gamma_list = [self.gamma_h1, self.gamma_h2, self.gamma_c13, self.gamma_n15, self.gamma_p31]

        #  for check_dimensions method
        self.acquired_files_list = []
        self.check_dimensions_strings = ['acqu*s', 'pdata/1/proc*s', 'audita.txt', 'pulseprogram']
        self.check_dimensions_list = [glob.glob(x) for x in self.check_dimensions_strings]
        self.pulse_data_files = sorted(self.check_dimensions_list[1], key=lambda x: int(re.sub('\D', '', x)))
        self.num_aqs = len(self.check_dimensions_list[0])

        #  for find_parameters method
        self.pulse_title_line = []
        self.sf_a = []
        self.SWH_N_a = []
        self.bf_a = []
        self.sw_a = []
        self.ndfnmode_a = []
        self.nuc_a = []
        self.Onum_a = []
        self.sfo_a = []
        self.td_a = []
        self.COMP_a = []
        self.sr_a = []
        self.carr_a = []
        self.aqmod_a = []
        self.sf1 = None
        self.BF0 = None
        self.temperature = None
        self.pulseprogram = None
        self.number_of_scans = None
        self.aswap = None
        self.setdecim = None
        self.set_dspvs = None
        self.set_aqseq = None
        self.set_grpdly = None
        self.set_ndfnmode = None
        self.aquisition_mode = None
        self.first_spectral_width = None
        self.aqusrealpath = os.path.dirname(os.path.realpath('acqus'))
        self.find_parameter_strings = ['INSTRUM', 'PULPROG', 'TE', 'NS', 'O1', 'TD', 'SW_h', 'SW', 'NUC1', 'BF1',
                                       'SFO1', 'DECIM', 'GRPDLY', 'DSPFVS', 'FnMODE', 'AQ_mod']

    def append_path(self):  # ---Appending system path
        syspath = sys.path
        if 'dir_path' not in syspath:
            sys.path.append(self.dir_path)

    def check_dimensions(self):  # ---Check Dimension (get number of 'AQUS' in current dir)---#
        for i in range(self.num_aqs):
            if i == 0:
                if 'acqus' in self.acquired_files_list:
                    continue
                else:
                    self.acquired_files_list.append('acqus')
            else:
                if "acqu{}s".format(i + 1) in self.acquired_files_list:
                    continue
                else:
                    self.acquired_files_list.append("acqu{}s".format(i + 1))

        if len(self.pulse_data_files) != self.num_aqs:
            print("pdata/1/proc#s does not match dim")
        return self.acquired_files_list

    def find_parameters(self):  # ---Find Parameters & Append to Arrays---#
        with open('pdata/1/title', "r") as pd:
            for line in pd:
                self.pulse_title_line.append(line)
        with open('pdata/1/procs', "r") as pdata:
            for lines in pdata:
                if "##$SF=" in lines:
                    a, self.sf1 = lines.split(" ", 1)
                    self.sf1 = self.sf1.strip("\n")
                    self.sf1 = self.sf1.strip("\r")
        opened_pulseprog = open(self.pulse_data_files[0], "r")
        aqseq = re.compile('aqseq')
        for aqseq_line in opened_pulseprog:
            aqseq_list = aqseq.findall(aqseq_line)
            if int(len(aqseq_list)) > 0:
                for ele in aqseq_list:
                    a, self.set_aqseq = aqseq_line.split(" ", 1)
                    self.set_aqseq = self.set_aqseq.strip("\n")
            else:
                self.set_aqseq = 'Undefined'
        opened_audita = open(self.check_dimensions_list[2][0], "r")
        topspinv = re.compile('##TITLE')
        for audita_line in opened_audita:
            topspinv_list = topspinv.findall(audita_line)
            for ele in topspinv_list:
                TOPSPINV = audita_line.split(" ", 1)
                if TOPSPINV[1] == 2:
                    self.aswap = "noaswap"
                else:
                    self.aswap = "aswap"

        with open(self.check_dimensions()[0], "r") as acqus:
            for lines in acqus:
                for nums in range(self.num_aqs):
                    if "SFO{}".format(nums+1) in lines:
                        a, SF = lines.split(" ", 1)
                        SF = SF.strip("\n")
                        SF = SF.strip("\r")
                        self.sf_a.append(SF)

        for acqu_file in self.acquired_files_list:
            opened_file = open(acqu_file, "r")  # opens each aqus, aqu2s, aqu3s
            instrum = re.compile(r'^.*\b(INSTRUM)\b.*$')  # ---Get Instrument Name---#
            pulseprog = re.compile(r'^.*\b(PULPROG)\b.*$')  # ---Get Pulse Program Name---#
            temp = re.compile(r'^.*\b(TE)\b.*$')  # ---Get Temperature---#
            ns = re.compile(r'^.*\b(NS)\b.*$')  # ---Get Number of Scans per FID---#
            onum = re.compile(r'^.*\b(O1)\b.*$')  # ---Get Offset Freq. of Carrier in Hz---#
            fidsize = re.compile(r'^.*\b(TD)\b.*$')  # ---Get size of FID---#
            specw = re.compile(r'^.*\b(SW_h)\b.*$')  # ---Get spectral width in Hz for first DIM (acqus)---#
            specw2 = re.compile(r'^.*\b(SW)\b.*$')  # ---Get spectral width in Hz for all other DIM (acqu#s)---#
            nuc = re.compile(r'^.*\b(NUC1)\b.*$')  # ---Get nucleus of acquisition DIM---#
            bf = re.compile('BF1')  # ---Get basic freq.---#
            sfo = re.compile(r'^.*\b(SFO1)\b.*$')  # ---Get observation freq.---#
            decim = re.compile(r'^.*\b(DECIM)\b.*$')  # ---Set decim to clear the extra points---#
            grpdly = re.compile(r'^.*\b(GRPDLY)\b.*$')  # ---Set grpdly to make sure delay is right---#
            dspfvs = re.compile(r'^.*\b(DSPFVS)\b.*$')  # ---Set dspsvf to make sure delay is right---#
            ndfnmode = re.compile(r'^.*\b(FnMODE)\b.*$')  # ---Determine >1D Acqmode---#
            fnmode1d = re.compile(r'^.*\b(AQ_mod)\b.*$')  # ---Determine 1D Acqmode---#
            for line in opened_file:
                instrumval_list = instrum.findall(line)
                pulseprog_list = pulseprog.findall(line)
                temp_list = temp.findall(line)
                ns_list = ns.findall(line)
                onum_list = onum.findall(line)
                tdval_list = fidsize.findall(line)
                specw_list = specw.findall(line)
                specww_list = specw2.findall(line)
                nuc_list = nuc.findall(line)
                bf_list = bf.findall(line)
                sfo_list = sfo.findall(line)
                decim_list = decim.findall(line)
                grpdly_list = grpdly.findall(line)
                dspfvs_list = dspfvs.findall(line)
                ndfnmode_list = ndfnmode.findall(line)
                fnmode1d_list = fnmode1d.findall(line)
                for ele in instrumval_list:
                    a, self.instrument = line.split(" ")
                    self.instrument = self.instrument[1:-2]
                    if self.instrument == '':
                        print("instrument value: Not Found")
                for ele in pulseprog_list:
                    a, self.pulseprogram = line.split(" ")
                    self.pulseprogram = self.pulseprogram[1:-2]
                for ele in temp_list:
                    if acqu_file == 'acqus':
                        a, self.temperature = line.split(" ")
                        self.temperature = self.temperature.strip("\n")
                        if self.temperature == '' or self.temperature == '0.0':
                            print("ERROR: Unable to find self.temperature.")
                            print("Setting TEMP variable to 0.0")
                            self.temperature = 0
                for ele in ns_list:
                    if acqu_file == 'acqus':
                        a, self.number_of_scans = line.split(" ")
                        self.number_of_scans = self.number_of_scans.strip("\n")
                for ele in onum_list:
                    a, O1 = line.split(" ")
                    O1 = O1.strip("\n")
                    self.Onum_a.append(O1)
                for ele in tdval_list:
                    a, TD = line.split(" ")
                    TD = TD.strip("\n")
                    self.td_a.append(float(TD))
                    self.COMP_a.append(float(TD)/2)
                for ele in specw_list:
                    if acqu_file == 'acqus':
                        a, self.first_spectral_width = line.split(" ")
                        self.first_spectral_width = self.first_spectral_width.strip("\n")
                for ele in specww_list:
                    if acqu_file != 'acqus':
                        a, SW = line.split(" ")
                        SW = SW.strip("\n")
                        self.sw_a.append(SW)
                for ele in nuc_list:
                    nucrm = re.sub('[<>]','',line)
                    a, NUC = nucrm.split(" ")
                    NUC = NUC.strip("\n")
                    NUC = NUC.strip("\r")
                    self.nuc_a.append(NUC)
                for ele in bf_list:
                    a, BF = line.split(" ")
                    BF = BF.strip("\n")
                    self.bf_a.append(BF)
                for ele in sfo_list:
                    a, SFO = line.split(" ")
                    SFO = SFO.strip("\n")
                    self.sfo_a.append(SFO)
                for ele in decim_list:
                    if acqu_file == 'acqus':
                        a, self.setdecim = line.split(" ")
                        self.setdecim = self.setdecim.strip("\n")
                for ele in grpdly_list:
                    if acqu_file == 'acqus':
                        a, self.set_grpdly = line.split(" ")
                        self.set_grpdly = self.set_grpdly.strip("\n")
                for ele in dspfvs_list:
                    if acqu_file == 'acqus':
                        a, self.set_dspvs = line.split(" ")
                        self.set_dspvs = self.set_dspvs.strip("\n")
                for ele in ndfnmode_list:
                    if acqu_file != 'acqus':
                        a, self.set_ndfnmode = line.split(" ")
                        self.set_ndfnmode = self.set_ndfnmode.strip("\n")
                        self.set_ndfnmode = self.set_ndfnmode.strip("\r")
                        if int(self.set_ndfnmode) == 5:
                            self.set_ndfnmode = "STATES-TPPI"
                        elif int(self.set_ndfnmode) == 4:
                            self.set_ndfnmode = "STATES"
                        elif int(self.set_ndfnmode) == 3:
                            self.set_ndfnmode = "TPPI"
                        else:
                            print("ERROR - FnMODE parameters unknown - Setting to STATES")
                            self.set_ndfnmode = "STATES"
                        self.ndfnmode_a.append(self.set_ndfnmode)
                for ele in fnmode1d_list:
                    if acqu_file == 'acqus':
                        a, self.aquisition_mode = line.split(" ")
                        self.aquisition_mode = self.aquisition_mode.strip("\n")
                    if int(self.aquisition_mode) == 0:
                        self.aquisition_mode = "Real"
                    elif int(self.aquisition_mode) == 1:
                        self.aquisition_mode = "Complex"
                    elif int(self.aquisition_mode) == 2:
                        self.aquisition_mode = "Sequential"
                    elif int(self.aquisition_mode) == 3:
                        self.aquisition_mode = "DQD"
                    else:
                        print("ERROR - AQMOD parameters unknown - Setting to Complex")
                        self.aquisition_mode = "Complex"
                    self.aqmod_a.append(self.aquisition_mode)
            if acqu_file != 'acqus':
                self.SWH_N_a.append(float(SW)*float(SFO))
            elif acqu_file == 'acqus' and NUC == '1H':
                self.BF0 = (float(self.bf_a[0]))/float(self.gamma_h1)
            elif acqu_file == 'acqus' and NUC == '2H':
                self.BF0 = (float(self.bf_a[0]))/float(self.gamma_h2)
            elif acqu_file == 'acqus' and NUC == '13C':
                self.BF0 = (float(self.bf_a[0]))/float(self.gamma_c13)
            elif acqu_file == 'acqus' and NUC == '15N':
                self.BF0 = (float(self.bf_a[0]))/float(self.gamma_n15)
            elif acqu_file == 'acqus' and NUC == '31P':
                self.BF0 = (float(self.bf_a[0]))/float(self.gamma_p31)
            else:
                self.BF0 = (float(self.bf_a[0]))
                if acqu_file == 'acqus':
                    print("\nERROR - Nucleus", NUC, "not found. \nPlease add to Bruk2pipe.py")
        return self.sf1, self.aswap, self.set_aqseq, self.temperature, self.aqmod_a

    def calculate_srcarr(self):  # ---Calculate SR (reference offsets) & CARR relative to reference liquid in PPM---#
        SR1 = (float(self.find_parameters()[0])-float(self.BF0))*1000000
        for i in range(len(self.acquired_files_list)):
            self.sr_a.append(float(SR1)*(float(self.bf_a[i])/float(self.BF0)))
            self.carr_a.append((float(self.Onum_a[i])-(float(self.sr_a[i])))/(float(self.sfo_a[i])))
        return self.carr_a

    def write_com(self):  # ---Convert.com arrays # ---Start Writing Convert.com---#
        print("Writing Convert.com...")
        dimN_a = ["-xN", "-yN", "-zN"]
        dimT_a = ["-xT", "-yT", "-zT"]
        dimMODE_a = ["-xMODE", "-yMODE", "-zMODE"]
        dimSW_a = ["-xSW", "-ySW", "-zSW"]
        dimOBS_a = ["-xOBS", "-yOBS", "-zOBS"]
        dimCAR_a = ["-xCAR", "-yCAR", "-zCAR"]
        dimLAB_a = ["-xLAB", "-yLAB", "-zLAB"]

        with open("convert.com", "w") as f:
            f.write('#! /bin/csh -f \n')
            f.write('# convert.com \n')
            f.write('# Created by bruk2pipe on ');f.write(str(datetime.datetime.now().date()));f.write(' at ')
            f.write(str(datetime.datetime.now().time()));f.write('\n')
            f.write('# Data record at ');f.write(self.find_parameters()[3]);f.write('K on ');f.write(self.instrument);f.write('\n')
            f.write('# acqus located in: ');f.write(self.aqusrealpath);f.write('\n')
            f.write('# using pulse program: ');f.write(self.pulseprogram);f.write('\n')
            f.write('# Scans per FID: ');f.write(self.number_of_scans);f.write('\n')
            for ele in range(len(self.pulse_title_line)):
                f.write('# Title: ');f.write(str(self.pulse_title_line[ele]))
            f.write('\n')
            f.write('bruk2pipe -in ./ser \\');f.write('\n')
            f.write('-bad 0.0 -');f.write(self.find_parameters()[1]);f.write(' -DMX -decim ');f.write(self.setdecim)
            f.write(' -dspfvs ');f.write(self.set_dspvs);f.write(' -grpdly ');f.write(self.set_grpdly);f.write('\\\n')

        # self.set_aqseq = 321
            if self.find_parameters()[2] == '321' and self.num_aqs == 3:
                for each in range(8):
                    for k in range(int(self.num_aqs)):
                        if each == 0:
                            f.write(' ');f.write(dimN_a[k]);f.write(' ');f.write(str(int(self.td_a[k])));
                            if k == self.num_aqs-1:
                                f.write(' \\');f.write('\n')
                            else:
                                f.write(' ')
                        elif each == 1:
                            if self.set_ndfnmode != 'TPPI':
                                f.write(' ');f.write(dimT_a[k]);f.write(' ');f.write(str(int(self.COMP_a[k])));
                            else:
                                if k == 0:
                                    f.write(' ');f.write(dimT_a[k]);f.write(' ');f.write(int(str(self.COMP_a[k])));
                                else:
                                    f.write(' ');f.write(dimT_a[k]);f.write(' ');f.write(int(str(self.td_a[k])));
                            if k == self.num_aqs-1:
                                f.write(' \\');f.write('\n')
                            else:
                                f.write(' ')
                        elif each == 2:
                            if k > 0:
                                f.write(' ');f.write(dimMODE_a[k]);f.write(' ');f.write(str(self.ndfnmode_a[k-1]));
                            else:
                                f.write(' ');f.write(dimMODE_a[k]);f.write(' ');f.write(str(self.find_parameters()[4][k]));
                            if k == self.num_aqs-1:
                                f.write(' \\');f.write('\n')
                            else:
                                f.write(' ')
                        elif each == 3:
                            if k == 0:
                                f.write(' ');f.write(dimSW_a[k]);f.write(' ');f.write(str(self.first_spectral_width));
                            else:
                                f.write(' ');f.write(dimSW_a[k]);f.write(' ');f.write(str(self.SWH_N_a[k-1]));
                            if k == self.num_aqs-1:
                                f.write(' \\');f.write('\n')
                            else:
                                f.write(' ')
                        elif each == 4:
                            f.write(' ');f.write(dimOBS_a[k]);f.write(' ');f.write(str(self.sf_a[k]));
                            if k == self.num_aqs-1:
                                f.write(' \\');f.write('\n')
                            else:
                                f.write(' ')
                        elif each == 5:
                            f.write(' ');f.write(dimCAR_a[k]);f.write(' ');f.write(str(self.calculate_srcarr()[k]));
                            if k == self.num_aqs-1:
                                f.write(' \\');f.write('\n')
                            else:
                                f.write(' ')
                        elif each == 6:
                            f.write(' ');f.write(dimLAB_a[k]);f.write(' ');f.write(str(self.nuc_a[k]));
                            if k == self.num_aqs-1:
                                f.write(' \\');f.write('\n')
                            else:
                                f.write(' ')
                        elif each == 7:
                            if k == self.num_aqs-1:
                                f.write(' ');f.write('-ndim');f.write(' ');f.write(str(self.num_aqs))
                                f.write(' ');f.write('-aq2D');f.write(' ');f.write(str(self.ndfnmode_a[0]));f.write(' \\')
                            else:
                                pass
            # AQSEQ = 312
            if self.find_parameters()[2] == '312' and self.num_aqs == 3:
                for each in range(8):
                    for k in range(int(self.num_aqs)):
                        if each == 0:
                            if k == 0:
                                f.write(' ');f.write(dimN_a[k]);f.write(' ');f.write(str(int(self.td_a[k])));
                            else:
                                f.write(' ');f.write(dimN_a[k]);f.write(' ');f.write(str(int(self.td_ar[k-1])));
                            if k == self.num_aqs-1:
                                f.write(' \\');f.write('\n')
                            else:
                                f.write(' ')
                        elif each == 1:
                            if self.set_ndfnmode != 'TPPI':
                                if k == 0:
                                    f.write(' ');f.write(dimT_a[k]);f.write(' ');f.write(str(int(self.COMP_a[k])));
                                else:
                                    f.write(' ');f.write(dimT_a[k]);f.write(' ');f.write(str(int(self.COMP_ar[k-1])))
                            else:
                                if k == 0:
                                    f.write(' ');f.write(dimT_a[k]);f.write(' ');f.write(int(str(self.COMP_a[k])));
                                else:
                                    f.write(' ');f.write(dimT_a[k]);f.write(' ');f.write(int(str(self.td_ar[k])));
                            if k == self.num_aqs-1:
                                f.write(' \\');f.write('\n')
                            else:
                                f.write(' ')
                        elif each == 2:
                            if k > 0:
                                f.write(' ');f.write(dimMODE_a[k]);f.write(' ');f.write(str(self.ndfnmode_ar[k-1]));
                            else:
                                f.write(' ');f.write(dimMODE_a[k]);f.write(' ');f.write(str(self.find_parameters()[4][k]));
                            if k == self.num_aqs-1:
                                f.write(' \\');f.write('\n')
                            else:
                                f.write(' ')
                        elif each == 3:
                            if k == 0:
                                f.write(' ');f.write(dimSW_a[k]);f.write(' ');f.write(str(self.first_spectral_width));
                            else:
                                f.write(' ');f.write(dimSW_a[k]);f.write(' ');f.write(str(self.SWH_N_ar[k-1]));
                            if k == self.num_aqs-1:
                                f.write(' \\');f.write('\n')
                            else:
                                f.write(' ')
                        elif each == 4:
                            if k == 0:
                                f.write(' ');f.write(dimOBS_a[k]);f.write(' ');f.write(str(self.sf_a[k]));
                            else:
                                f.write(' ');f.write(dimOBS_a[k]);f.write(' ');f.write(str(self.sf_ar[k-1]));
                            if k == self.num_aqs-1:
                                f.write(' \\');f.write('\n')
                            else:
                                f.write(' ')
                        elif each == 5:
                            if k == 0:
                                f.write(' ');f.write(dimCAR_a[k]);f.write(' ');f.write(str(round(self.calculate_srcarr()[k], 3)));
                            else:
                                f.write(' ');f.write(dimCAR_a[k]);f.write(' ');f.write(str(round(self.calculate_srcarr()[k-1], 3)));
                            if k == self.num_aqs-1:
                                f.write(' \\');f.write('\n')
                            else:
                                f.write(' ')
                        elif each == 6:
                            if k == 0:
                                f.write(' ');f.write(dimLAB_a[k]);f.write(' ');f.write(str(self.nuc_a[k]));
                            else:
                                f.write(' ');f.write(dimLAB_a[k]);f.write(' ');f.write(str(self.nuc_ar[k-1]));
                            if k == self.num_aqs-1:
                                f.write(' \\');f.write('\n')
                            else:
                                f.write(' ')
                        elif each == 7:
                            if k == self.num_aqs-1:
                               f.write(' ');f.write('-ndim');f.write(' ');f.write(str(self.num_aqs))
                               f.write(' ');f.write('-aq2D');f.write(' ');f.write(str(self.ndfnmode_a[0]));f.write(' \\')
                            else:
                                pass
            # Else
            else:
                for each in range(8):
                    for k in range(int(self.num_aqs)):
                        if each == 0:
                            f.write(' ');f.write(dimN_a[k]);f.write(' ');f.write(str(int(self.td_a[k])));
                            if k == self.num_aqs-1:
                                f.write(' \\');f.write('\n')
                            else:
                                f.write(' ')
                        elif each == 1:
                            try:
                                if self.set_ndfnmode != 'TPPI':
                                    f.write(' ');f.write(dimT_a[k]);f.write(' ');f.write(str(int(self.COMP_a[k])));
                                else:
                                    if k == 0:
                                        f.write(' ');f.write(dimT_a[k]);f.write(' ');f.write(str(int(self.COMP_a[k])));
                                    else:
                                        f.write(' ');f.write(dimT_a[k]);f.write(' ');f.write(str(int(self.td_a[k])));
                                if k == self.num_aqs-1:
                                    f.write(' \\');f.write('\n')
                                else:
                                    f.write(' ')
                            except:
                                if k == 0:
                                    f.write(' ');f.write(dimT_a[k]);f.write(' ');f.write(str(int(self.COMP_a[k])));
                                else:
                                    f.write(' ');f.write(dimT_a[k]);f.write(' ');f.write(str(int(self.td_a[k])));
                                if k == self.num_aqs-1:
                                    f.write(' \\');f.write('\n')
                                else:
                                    f.write(' ')
                        elif each == 2:
                            if k > 0:
                                f.write(' ');f.write(dimMODE_a[k]);f.write(' ');f.write(str(self.ndfnmode_a[k-1]));
                            else:
                                f.write(' ');f.write(dimMODE_a[k]);f.write(' ');f.write(str(self.find_parameters()[4][k]));
                            if k == self.num_aqs-1:
                                f.write(' \\');f.write('\n')
                            else:
                                f.write(' ')
                        elif each == 3:
                            if k == 0:
                                f.write(' ');f.write(dimSW_a[k]);f.write(' ');f.write(str(self.first_spectral_width));
                            else:
                                f.write(' ');f.write(dimSW_a[k]);f.write(' ');f.write(str(self.SWH_N_a[k-1]));
                            if k == self.num_aqs-1:
                                f.write(' \\');f.write('\n')
                            else:
                                f.write(' ')
                        elif each == 4:
                            f.write(' ');f.write(dimOBS_a[k]);f.write(' ');f.write(str(self.sf_a[k]));
                            if k == self.num_aqs-1:
                                f.write(' \\');f.write('\n')
                            else:
                                f.write(' ')
                        elif each == 5:
                            f.write(' ');f.write(dimCAR_a[k]);f.write(' ');f.write(str(round(self.calculate_srcarr()[k], 3)));
                            if k == self.num_aqs-1:
                                f.write(' \\');f.write('\n')
                            else:
                                f.write(' ')
                        elif each == 6:
                            f.write(' ');f.write(dimLAB_a[k]);f.write(' ');f.write(str(self.nuc_a[k]));
                            if k == self.num_aqs-1:
                                f.write(' \\');f.write('\n')
                            else:
                                f.write(' ')
                        elif each == 7:
                            try:
                                if k == self.num_aqs-1:
                                   f.write(' ');f.write('-ndim');f.write(' ');f.write(str(self.num_aqs))
                                   f.write(' ');f.write('-aq2D');f.write(' ');
                                   f.write(str(self.ndfnmode_a[0]));f.write(' \\')
                                else:
                                    pass
                            except:
                                print("FnMode not specified for", self.num_aqs, "dimensional data set \n")
            f.write('\n')
            f.write(' -out ./fid/test%03d.fid -verb -ov ');f.write('\n')
            f.write('sleep 5')
            f.write('\n')
        f.close()

    @staticmethod
    def call_subprocesses():
        st = os.stat('convert.com')
        os.chmod('convert.com', st.st_mode | stat.S_IEXEC)
        print("Converting...")
        subprocess.call(['./convert.com'])
        print("Finding Proc File")
        subprocess.call(['bru_proc'])
        print("Completed.")


if __name__ == "__main__":
    Main().append_path()
    Main().check_dimensions()
    Main().find_parameters()  # - Double check against BBedit server version for if statements correct spacing
    Main().calculate_srcarr()
    Main().write_com()
    Main().call_subprocesses()
